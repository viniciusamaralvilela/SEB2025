
fatorialrecursivo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003348  08003348  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003348  08003348  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003348  08003348  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000078  080033c8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080033c8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007002  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f4  00000000  00000000  000270a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  00028698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016c07  00000000  00000000  00028d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000615c  00000000  00000000  0003f95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00081408  00000000  00000000  00045abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c6ec3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000005f0  00000000  00000000  000c6f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001cbc  00000000  00000000  000c7530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080024d8 	.word	0x080024d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080024d8 	.word	0x080024d8

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f000 ff12 	bl	8000f7e <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f000 ff06 	bl	8000f7e <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f000 fefa 	bl	8000f7e <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 fc80 	bl	8000a90 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f000 fef2 	bl	8000f7e <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f000 fee3 	bl	8000f7e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 fb63 	bl	800188c <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	200000c4 	.word	0x200000c4

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f000 fec9 	bl	8000f7e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 fb48 	bl	800188c <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	200000c4 	.word	0x200000c4

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fc03 	bl	8000a90 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	0800328c 	.word	0x0800328c
 8000340:	080032c8 	.word	0x080032c8
 8000344:	080032d8 	.word	0x080032d8

08000348 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000348:	b082      	sub	sp, #8
 800034a:	b590      	push	{r4, r7, lr}
 800034c:	b089      	sub	sp, #36	; 0x24
 800034e:	af00      	add	r7, sp, #0
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
 8000352:	4603      	mov	r3, r0
 8000354:	80fb      	strh	r3, [r7, #6]
 8000356:	460b      	mov	r3, r1
 8000358:	80bb      	strh	r3, [r7, #4]
 800035a:	4613      	mov	r3, r2
 800035c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800035e:	88fb      	ldrh	r3, [r7, #6]
 8000360:	b2d8      	uxtb	r0, r3
 8000362:	88bb      	ldrh	r3, [r7, #4]
 8000364:	b2d9      	uxtb	r1, r3
 8000366:	88fb      	ldrh	r3, [r7, #6]
 8000368:	b2da      	uxtb	r2, r3
 800036a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800036e:	4413      	add	r3, r2
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3b01      	subs	r3, #1
 8000374:	b2dc      	uxtb	r4, r3
 8000376:	88bb      	ldrh	r3, [r7, #4]
 8000378:	b2da      	uxtb	r2, r3
 800037a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800037e:	4413      	add	r3, r2
 8000380:	b2db      	uxtb	r3, r3
 8000382:	3b01      	subs	r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4622      	mov	r2, r4
 8000388:	f7ff ff88 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
 8000390:	e043      	b.n	800041a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	3b20      	subs	r3, #32
 8000398:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800039c:	fb01 f303 	mul.w	r3, r1, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	440b      	add	r3, r1
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	4413      	add	r3, r2
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
 80003b2:	e029      	b.n	8000408 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	69bb      	ldr	r3, [r7, #24]
 80003b8:	fa02 f303 	lsl.w	r3, r2, r3
 80003bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d00e      	beq.n	80003e2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80003c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003c6:	0a1b      	lsrs	r3, r3, #8
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	743b      	strb	r3, [r7, #16]
 80003ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff fefc 	bl	80001d8 <ST7735_WriteData>
 80003e0:	e00f      	b.n	8000402 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80003e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003e6:	0a1b      	lsrs	r3, r3, #8
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	733b      	strb	r3, [r7, #12]
 80003ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2102      	movs	r1, #2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff feeb 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000402:	69bb      	ldr	r3, [r7, #24]
 8000404:	3301      	adds	r3, #1
 8000406:	61bb      	str	r3, [r7, #24]
 8000408:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800040c:	461a      	mov	r2, r3
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	4293      	cmp	r3, r2
 8000412:	d3cf      	bcc.n	80003b4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	3301      	adds	r3, #1
 8000418:	61fb      	str	r3, [r7, #28]
 800041a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800041e:	461a      	mov	r2, r3
 8000420:	69fb      	ldr	r3, [r7, #28]
 8000422:	4293      	cmp	r3, r2
 8000424:	d3b5      	bcc.n	8000392 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000426:	bf00      	nop
 8000428:	3724      	adds	r7, #36	; 0x24
 800042a:	46bd      	mov	sp, r7
 800042c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000430:	b002      	add	sp, #8
 8000432:	4770      	bx	lr

08000434 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000434:	b082      	sub	sp, #8
 8000436:	b580      	push	{r7, lr}
 8000438:	b086      	sub	sp, #24
 800043a:	af04      	add	r7, sp, #16
 800043c:	603a      	str	r2, [r7, #0]
 800043e:	617b      	str	r3, [r7, #20]
 8000440:	4603      	mov	r3, r0
 8000442:	80fb      	strh	r3, [r7, #6]
 8000444:	460b      	mov	r3, r1
 8000446:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000448:	f7ff fe80 	bl	800014c <ST7735_Select>

    while(*str) {
 800044c:	e02d      	b.n	80004aa <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	7d3a      	ldrb	r2, [r7, #20]
 8000452:	4413      	add	r3, r2
 8000454:	2b9f      	cmp	r3, #159	; 0x9f
 8000456:	dd13      	ble.n	8000480 <ST7735_WriteString+0x4c>
            x = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800045c:	7d7b      	ldrb	r3, [r7, #21]
 800045e:	b29a      	uxth	r2, r3
 8000460:	88bb      	ldrh	r3, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000466:	88bb      	ldrh	r3, [r7, #4]
 8000468:	7d7a      	ldrb	r2, [r7, #21]
 800046a:	4413      	add	r3, r2
 800046c:	2b4f      	cmp	r3, #79	; 0x4f
 800046e:	dc21      	bgt.n	80004b4 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b20      	cmp	r3, #32
 8000476:	d103      	bne.n	8000480 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	603b      	str	r3, [r7, #0]
                continue;
 800047e:	e014      	b.n	80004aa <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	88b9      	ldrh	r1, [r7, #4]
 8000486:	88f8      	ldrh	r0, [r7, #6]
 8000488:	8c3b      	ldrh	r3, [r7, #32]
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	8bbb      	ldrh	r3, [r7, #28]
 800048e:	9301      	str	r3, [sp, #4]
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	f7ff ff57 	bl	8000348 <ST7735_WriteChar>
        x += font.width;
 800049a:	7d3b      	ldrb	r3, [r7, #20]
 800049c:	b29a      	uxth	r2, r3
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	4413      	add	r3, r2
 80004a2:	80fb      	strh	r3, [r7, #6]
        str++;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	603b      	str	r3, [r7, #0]
    while(*str) {
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1cd      	bne.n	800044e <ST7735_WriteString+0x1a>
 80004b2:	e000      	b.n	80004b6 <ST7735_WriteString+0x82>
                break;
 80004b4:	bf00      	nop
    }

    ST7735_Unselect();
 80004b6:	f7ff fe55 	bl	8000164 <ST7735_Unselect>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004c4:	b002      	add	sp, #8
 80004c6:	4770      	bx	lr

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa7e 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f809 	bl	80004e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f880 	bl	80005d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004d8:	f000 f846 	bl	8000568 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80004dc:	f7ff ff1a 	bl	8000314 <ST7735_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  menu();
 80004e0:	f000 f8f0 	bl	80006c4 <menu>
 80004e4:	e7fc      	b.n	80004e0 <main+0x18>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b090      	sub	sp, #64	; 0x40
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 0318 	add.w	r3, r7, #24
 80004f0:	2228      	movs	r2, #40	; 0x28
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fbd5 	bl	8001ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000510:	2310      	movs	r3, #16
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000514:	2302      	movs	r3, #2
 8000516:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000518:	2300      	movs	r3, #0
 800051a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800051c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000520:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fd42 	bl	8000fb0 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000532:	f000 f94d 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000536:	230f      	movs	r3, #15
 8000538:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	2302      	movs	r3, #2
 800053c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2102      	movs	r1, #2
 8000550:	4618      	mov	r0, r3
 8000552:	f000 ffad 	bl	80014b0 <HAL_RCC_ClockConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800055c:	f000 f938 	bl	80007d0 <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	3740      	adds	r7, #64	; 0x40
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MX_SPI1_Init+0x68>)
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <MX_SPI1_Init+0x6c>)
 8000570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_SPI1_Init+0x68>)
 800057c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000580:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_SPI1_Init+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_SPI1_Init+0x68>)
 8000596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_SPI1_Init+0x68>)
 800059e:	2220      	movs	r2, #32
 80005a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005b6:	220a      	movs	r2, #10
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_SPI1_Init+0x68>)
 80005bc:	f001 f8e2 	bl	8001784 <HAL_SPI_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80005c6:	f000 f903 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c4 	.word	0x200000c4
 80005d4:	40013000 	.word	0x40013000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <MX_GPIO_Init+0xb4>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <MX_GPIO_Init+0xb4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <MX_GPIO_Init+0xb4>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_GPIO_Init+0xb4>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <MX_GPIO_Init+0xb4>)
 800060a:	f043 0308 	orr.w	r3, r3, #8
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_GPIO_Init+0xb4>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2110      	movs	r1, #16
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000622:	f000 fcac 	bl	8000f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2103      	movs	r1, #3
 800062a:	481a      	ldr	r0, [pc, #104]	; (8000694 <MX_GPIO_Init+0xbc>)
 800062c:	f000 fca7 	bl	8000f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 8000630:	2310      	movs	r3, #16
 8000632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	4619      	mov	r1, r3
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_GPIO_Init+0xb8>)
 8000648:	f000 fb28 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin;
 800064c:	2303      	movs	r3, #3
 800064e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2302      	movs	r3, #2
 800065a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	4619      	mov	r1, r3
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_GPIO_Init+0xbc>)
 8000664:	f000 fb1a 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000668:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800066c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	4619      	mov	r1, r3
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_GPIO_Init+0xb8>)
 800067e:	f000 fb0d 	bl	8000c9c <HAL_GPIO_Init>

}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800
 8000694:	40010c00 	.word	0x40010c00

08000698 <fatorial>:

/* USER CODE BEGIN 4 */
int fatorial(int n) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if (n == 0) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <fatorial+0x12>
    return 1;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e008      	b.n	80006bc <fatorial+0x24>
  } else {
    return n * fatorial(n - 1);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fff2 	bl	8000698 <fatorial>
 80006b4:	4602      	mov	r2, r0
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	fb03 f302 	mul.w	r3, r3, r2
  }
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <menu>:

void menu() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af04      	add	r7, sp, #16
  int aumentar = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  int confirmar = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]

  while (n >= 0 && n <= 10) {
 80006d2:	e04e      	b.n	8000772 <menu+0xae>
    aumentar = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4835      	ldr	r0, [pc, #212]	; (80007b0 <menu+0xec>)
 80006da:	f000 fc39 	bl	8000f50 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	60fb      	str	r3, [r7, #12]
    confirmar = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80006e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e6:	4832      	ldr	r0, [pc, #200]	; (80007b0 <menu+0xec>)
 80006e8:	f000 fc32 	bl	8000f50 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	60bb      	str	r3, [r7, #8]

    if (aumentar == 1) {
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d11d      	bne.n	8000732 <menu+0x6e>
      n++;
 80006f6:	4b2f      	ldr	r3, [pc, #188]	; (80007b4 <menu+0xf0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <menu+0xf0>)
 80006fe:	6013      	str	r3, [r2, #0]
      sprintf(escolher, "numero: %d",n);
 8000700:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <menu+0xf0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	492c      	ldr	r1, [pc, #176]	; (80007b8 <menu+0xf4>)
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <menu+0xf8>)
 800070a:	f001 fb89 	bl	8001e20 <siprintf>
      ST7735_WriteString(10, 20, escolher, Font_11x18, BLACK, WHITE );
 800070e:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <menu+0xfc>)
 8000710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000714:	9202      	str	r2, [sp, #8]
 8000716:	2200      	movs	r2, #0
 8000718:	9201      	str	r2, [sp, #4]
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a26      	ldr	r2, [pc, #152]	; (80007bc <menu+0xf8>)
 8000722:	2114      	movs	r1, #20
 8000724:	200a      	movs	r0, #10
 8000726:	f7ff fe85 	bl	8000434 <ST7735_WriteString>
      HAL_Delay(300);
 800072a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800072e:	f000 f9af 	bl	8000a90 <HAL_Delay>
    }

    if (confirmar == 1) {
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d11c      	bne.n	8000772 <menu+0xae>
      int resultado = fatorial(n);
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <menu+0xf0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffab 	bl	8000698 <fatorial>
 8000742:	6078      	str	r0, [r7, #4]
      sprintf(conta, "Fatorial: %d", resultado);
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	491f      	ldr	r1, [pc, #124]	; (80007c4 <menu+0x100>)
 8000748:	481f      	ldr	r0, [pc, #124]	; (80007c8 <menu+0x104>)
 800074a:	f001 fb69 	bl	8001e20 <siprintf>
      ST7735_WriteString(10, 60, conta, Font_11x18, WHITE, BLUE);
 800074e:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <menu+0xfc>)
 8000750:	221f      	movs	r2, #31
 8000752:	9202      	str	r2, [sp, #8]
 8000754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000758:	9201      	str	r2, [sp, #4]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <menu+0x104>)
 8000762:	213c      	movs	r1, #60	; 0x3c
 8000764:	200a      	movs	r0, #10
 8000766:	f7ff fe65 	bl	8000434 <ST7735_WriteString>
      HAL_Delay(1000);
 800076a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076e:	f000 f98f 	bl	8000a90 <HAL_Delay>
  while (n >= 0 && n <= 10) {
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <menu+0xf0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	db03      	blt.n	8000782 <menu+0xbe>
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <menu+0xf0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b0a      	cmp	r3, #10
 8000780:	dda8      	ble.n	80006d4 <menu+0x10>
    }
  }

  if (n > 10) {
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <menu+0xf0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	dd0e      	ble.n	80007a8 <menu+0xe4>
    ST7735_WriteString(10, 90, "Numero invalido", Font_11x18, WHITE, RED);
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <menu+0xfc>)
 800078c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000790:	9202      	str	r2, [sp, #8]
 8000792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	9200      	str	r2, [sp, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <menu+0x108>)
 80007a0:	215a      	movs	r1, #90	; 0x5a
 80007a2:	200a      	movs	r0, #10
 80007a4:	f7ff fe46 	bl	8000434 <ST7735_WriteString>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40010800 	.word	0x40010800
 80007b4:	20000094 	.word	0x20000094
 80007b8:	080024f0 	.word	0x080024f0
 80007bc:	200000a4 	.word	0x200000a4
 80007c0:	20000000 	.word	0x20000000
 80007c4:	080024fc 	.word	0x080024fc
 80007c8:	200000b4 	.word	0x200000b4
 80007cc:	0800250c 	.word	0x0800250c

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <Error_Handler+0x6>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <HAL_MspInit+0x5c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_MspInit+0x5c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x5c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x5c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_MspInit+0x60>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_MspInit+0x60>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	40010000 	.word	0x40010000

0800083c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <HAL_SPI_MspInit+0x70>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d123      	bne.n	80008a4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_SPI_MspInit+0x74>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_SPI_MspInit+0x74>)
 8000862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_SPI_MspInit+0x74>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_SPI_MspInit+0x74>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_SPI_MspInit+0x74>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_SPI_MspInit+0x74>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_SPI_MspInit+0x78>)
 80008a0:	f000 f9fc 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40013000 	.word	0x40013000
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010800 	.word	0x40010800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fe:	f000 f8ab 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	; (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f001 f98a 	bl	8001c50 <__errno>
 800093c:	4602      	mov	r2, r0
 800093e:	230c      	movs	r3, #12
 8000940:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20005000 	.word	0x20005000
 8000968:	00000400 	.word	0x00000400
 800096c:	20000098 	.word	0x20000098
 8000970:	20000128 	.word	0x20000128

08000974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a6:	f7ff ffe5 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f001 f957 	bl	8001c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fd8b 	bl	80004c8 <main>
  bx lr
 80009b2:	4770      	bx	lr
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009bc:	08003350 	.word	0x08003350
  ldr r2, =_sbss
 80009c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009c4:	20000124 	.word	0x20000124

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x28>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f929 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fef6 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f933 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f909 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000010 	.word	0x20000010
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000010 	.word	0x20000010
 8000a78:	2000011c 	.word	0x2000011c

08000a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	2000011c 	.word	0x2000011c

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fff0 	bl	8000a7c <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_Delay+0x40>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffe0 	bl	8000a7c <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000010 	.word	0x20000010

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff90 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff49 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff5e 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff90 	bl	8000b8c <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5f 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffb0 	bl	8000bf0 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b08b      	sub	sp, #44	; 0x2c
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	e127      	b.n	8000f00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 8116 	bne.w	8000efa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b12      	cmp	r3, #18
 8000cd4:	d034      	beq.n	8000d40 <HAL_GPIO_Init+0xa4>
 8000cd6:	2b12      	cmp	r3, #18
 8000cd8:	d80d      	bhi.n	8000cf6 <HAL_GPIO_Init+0x5a>
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d02b      	beq.n	8000d36 <HAL_GPIO_Init+0x9a>
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d804      	bhi.n	8000cec <HAL_GPIO_Init+0x50>
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d031      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d01c      	beq.n	8000d24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cea:	e048      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d043      	beq.n	8000d78 <HAL_GPIO_Init+0xdc>
 8000cf0:	2b11      	cmp	r3, #17
 8000cf2:	d01b      	beq.n	8000d2c <HAL_GPIO_Init+0x90>
          break;
 8000cf4:	e043      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf6:	4a89      	ldr	r2, [pc, #548]	; (8000f1c <HAL_GPIO_Init+0x280>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d026      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
 8000cfc:	4a87      	ldr	r2, [pc, #540]	; (8000f1c <HAL_GPIO_Init+0x280>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d806      	bhi.n	8000d10 <HAL_GPIO_Init+0x74>
 8000d02:	4a87      	ldr	r2, [pc, #540]	; (8000f20 <HAL_GPIO_Init+0x284>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d020      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
 8000d08:	4a86      	ldr	r2, [pc, #536]	; (8000f24 <HAL_GPIO_Init+0x288>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01d      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
          break;
 8000d0e:	e036      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d10:	4a85      	ldr	r2, [pc, #532]	; (8000f28 <HAL_GPIO_Init+0x28c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d019      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
 8000d16:	4a85      	ldr	r2, [pc, #532]	; (8000f2c <HAL_GPIO_Init+0x290>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d016      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
 8000d1c:	4a84      	ldr	r2, [pc, #528]	; (8000f30 <HAL_GPIO_Init+0x294>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0xae>
          break;
 8000d22:	e02c      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e028      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	3304      	adds	r3, #4
 8000d32:	623b      	str	r3, [r7, #32]
          break;
 8000d34:	e023      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e01e      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	330c      	adds	r3, #12
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e019      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d52:	2304      	movs	r3, #4
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e012      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d105      	bne.n	8000d6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d60:	2308      	movs	r3, #8
 8000d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	611a      	str	r2, [r3, #16]
          break;
 8000d6a:	e008      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	615a      	str	r2, [r3, #20]
          break;
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2bff      	cmp	r3, #255	; 0xff
 8000d82:	d801      	bhi.n	8000d88 <HAL_GPIO_Init+0xec>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	e001      	b.n	8000d8c <HAL_GPIO_Init+0xf0>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2bff      	cmp	r3, #255	; 0xff
 8000d92:	d802      	bhi.n	8000d9a <HAL_GPIO_Init+0xfe>
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x104>
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	3b08      	subs	r3, #8
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	210f      	movs	r1, #15
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	401a      	ands	r2, r3
 8000db2:	6a39      	ldr	r1, [r7, #32]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 8096 	beq.w	8000efa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dce:	4b59      	ldr	r3, [pc, #356]	; (8000f34 <HAL_GPIO_Init+0x298>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a58      	ldr	r2, [pc, #352]	; (8000f34 <HAL_GPIO_Init+0x298>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <HAL_GPIO_Init+0x298>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000de6:	4a54      	ldr	r2, [pc, #336]	; (8000f38 <HAL_GPIO_Init+0x29c>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	089b      	lsrs	r3, r3, #2
 8000dec:	3302      	adds	r3, #2
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4b      	ldr	r2, [pc, #300]	; (8000f3c <HAL_GPIO_Init+0x2a0>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x19e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <HAL_GPIO_Init+0x2a4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x19a>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a49      	ldr	r2, [pc, #292]	; (8000f44 <HAL_GPIO_Init+0x2a8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x196>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <HAL_GPIO_Init+0x2ac>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x192>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x1a0>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x1a0>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x1a0>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x1a0>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e4c:	493a      	ldr	r1, [pc, #232]	; (8000f38 <HAL_GPIO_Init+0x29c>)
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4938      	ldr	r1, [pc, #224]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	4933      	ldr	r1, [pc, #204]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	492e      	ldr	r1, [pc, #184]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	604b      	str	r3, [r1, #4]
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4929      	ldr	r1, [pc, #164]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	4924      	ldr	r1, [pc, #144]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	608b      	str	r3, [r1, #8]
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	491f      	ldr	r1, [pc, #124]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	491a      	ldr	r1, [pc, #104]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60cb      	str	r3, [r1, #12]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4915      	ldr	r1, [pc, #84]	; (8000f4c <HAL_GPIO_Init+0x2b0>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	3301      	adds	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f47f aed0 	bne.w	8000cb0 <HAL_GPIO_Init+0x14>
  }
}
 8000f10:	bf00      	nop
 8000f12:	372c      	adds	r7, #44	; 0x2c
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	10210000 	.word	0x10210000
 8000f20:	10110000 	.word	0x10110000
 8000f24:	10120000 	.word	0x10120000
 8000f28:	10310000 	.word	0x10310000
 8000f2c:	10320000 	.word	0x10320000
 8000f30:	10220000 	.word	0x10220000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40011000 	.word	0x40011000
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	40010400 	.word	0x40010400

08000f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e001      	b.n	8000f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f8e:	787b      	ldrb	r3, [r7, #1]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f94:	887a      	ldrh	r2, [r7, #2]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f9a:	e003      	b.n	8000fa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	041a      	lsls	r2, r3, #16
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	611a      	str	r2, [r3, #16]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
	...

08000fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e26c      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 8087 	beq.w	80010de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd0:	4b92      	ldr	r3, [pc, #584]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 030c 	and.w	r3, r3, #12
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d00c      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fdc:	4b8f      	ldr	r3, [pc, #572]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d112      	bne.n	800100e <HAL_RCC_OscConfig+0x5e>
 8000fe8:	4b8c      	ldr	r3, [pc, #560]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d10b      	bne.n	800100e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff6:	4b89      	ldr	r3, [pc, #548]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d06c      	beq.n	80010dc <HAL_RCC_OscConfig+0x12c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d168      	bne.n	80010dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e246      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x76>
 8001018:	4b80      	ldr	r3, [pc, #512]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a7f      	ldr	r2, [pc, #508]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 800101e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e02e      	b.n	8001084 <HAL_RCC_OscConfig+0xd4>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x98>
 800102e:	4b7b      	ldr	r3, [pc, #492]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7a      	ldr	r2, [pc, #488]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b78      	ldr	r3, [pc, #480]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a77      	ldr	r2, [pc, #476]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e01d      	b.n	8001084 <HAL_RCC_OscConfig+0xd4>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001050:	d10c      	bne.n	800106c <HAL_RCC_OscConfig+0xbc>
 8001052:	4b72      	ldr	r3, [pc, #456]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a71      	ldr	r2, [pc, #452]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b6f      	ldr	r3, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6e      	ldr	r2, [pc, #440]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e00b      	b.n	8001084 <HAL_RCC_OscConfig+0xd4>
 800106c:	4b6b      	ldr	r3, [pc, #428]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a6a      	ldr	r2, [pc, #424]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b68      	ldr	r3, [pc, #416]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a67      	ldr	r2, [pc, #412]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 800107e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108c:	f7ff fcf6 	bl	8000a7c <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fcf2 	bl	8000a7c <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e1fa      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0xe4>
 80010b2:	e014      	b.n	80010de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b4:	f7ff fce2 	bl	8000a7c <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fcde 	bl	8000a7c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e1e6      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f0      	bne.n	80010bc <HAL_RCC_OscConfig+0x10c>
 80010da:	e000      	b.n	80010de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d063      	beq.n	80011b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ea:	4b4c      	ldr	r3, [pc, #304]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00b      	beq.n	800110e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010f6:	4b49      	ldr	r3, [pc, #292]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d11c      	bne.n	800113c <HAL_RCC_OscConfig+0x18c>
 8001102:	4b46      	ldr	r3, [pc, #280]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d005      	beq.n	8001126 <HAL_RCC_OscConfig+0x176>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d001      	beq.n	8001126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e1ba      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4939      	ldr	r1, [pc, #228]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113a:	e03a      	b.n	80011b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d020      	beq.n	8001186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001144:	4b36      	ldr	r3, [pc, #216]	; (8001220 <HAL_RCC_OscConfig+0x270>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fc97 	bl	8000a7c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc93 	bl	8000a7c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e19b      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4927      	ldr	r1, [pc, #156]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
 8001184:	e015      	b.n	80011b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_RCC_OscConfig+0x270>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118c:	f7ff fc76 	bl	8000a7c <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fc72 	bl	8000a7c <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e17a      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d03a      	beq.n	8001234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d019      	beq.n	80011fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_RCC_OscConfig+0x274>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fc56 	bl	8000a7c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc52 	bl	8000a7c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e15a      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 faa8 	bl	8001748 <RCC_Delay>
 80011f8:	e01c      	b.n	8001234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_RCC_OscConfig+0x274>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fc3c 	bl	8000a7c <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001206:	e00f      	b.n	8001228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fc38 	bl	8000a7c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d908      	bls.n	8001228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e140      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	42420000 	.word	0x42420000
 8001224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001228:	4b9e      	ldr	r3, [pc, #632]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1e9      	bne.n	8001208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a6 	beq.w	800138e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001246:	4b97      	ldr	r3, [pc, #604]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10d      	bne.n	800126e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b94      	ldr	r3, [pc, #592]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a93      	ldr	r2, [pc, #588]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]
 800125e:	4b91      	ldr	r3, [pc, #580]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126e:	4b8e      	ldr	r3, [pc, #568]	; (80014a8 <HAL_RCC_OscConfig+0x4f8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d118      	bne.n	80012ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x4f8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a8a      	ldr	r2, [pc, #552]	; (80014a8 <HAL_RCC_OscConfig+0x4f8>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001286:	f7ff fbf9 	bl	8000a7c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128e:	f7ff fbf5 	bl	8000a7c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e0fd      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <HAL_RCC_OscConfig+0x4f8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x312>
 80012b4:	4b7b      	ldr	r3, [pc, #492]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4a7a      	ldr	r2, [pc, #488]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6213      	str	r3, [r2, #32]
 80012c0:	e02d      	b.n	800131e <HAL_RCC_OscConfig+0x36e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x334>
 80012ca:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a75      	ldr	r2, [pc, #468]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6213      	str	r3, [r2, #32]
 80012d6:	4b73      	ldr	r3, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4a72      	ldr	r2, [pc, #456]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	6213      	str	r3, [r2, #32]
 80012e2:	e01c      	b.n	800131e <HAL_RCC_OscConfig+0x36e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d10c      	bne.n	8001306 <HAL_RCC_OscConfig+0x356>
 80012ec:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4a6c      	ldr	r2, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6213      	str	r3, [r2, #32]
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4a69      	ldr	r2, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6213      	str	r3, [r2, #32]
 8001304:	e00b      	b.n	800131e <HAL_RCC_OscConfig+0x36e>
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d015      	beq.n	8001352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fba9 	bl	8000a7c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff fba5 	bl	8000a7c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0ab      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0ee      	beq.n	800132e <HAL_RCC_OscConfig+0x37e>
 8001350:	e014      	b.n	800137c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fb93 	bl	8000a7c <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001358:	e00a      	b.n	8001370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fb8f 	bl	8000a7c <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e095      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ee      	bne.n	800135a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d105      	bne.n	800138e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a47      	ldr	r2, [pc, #284]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800138c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8081 	beq.w	800149a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001398:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d061      	beq.n	8001468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d146      	bne.n	800143a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_RCC_OscConfig+0x4fc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fb63 	bl	8000a7c <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff fb5f 	bl	8000a7c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e067      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f0      	bne.n	80013ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d108      	bne.n	80013f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	492d      	ldr	r1, [pc, #180]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a19      	ldr	r1, [r3, #32]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	430b      	orrs	r3, r1
 8001406:	4927      	ldr	r1, [pc, #156]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_RCC_OscConfig+0x4fc>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb33 	bl	8000a7c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb2f 	bl	8000a7c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e037      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x46a>
 8001438:	e02f      	b.n	800149a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_RCC_OscConfig+0x4fc>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fb1c 	bl	8000a7c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff fb18 	bl	8000a7c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e020      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x498>
 8001466:	e018      	b.n	800149a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e013      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	429a      	cmp	r2, r3
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40007000 	.word	0x40007000
 80014ac:	42420060 	.word	0x42420060

080014b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0d0      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014c4:	4b6a      	ldr	r3, [pc, #424]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d910      	bls.n	80014f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 0207 	bic.w	r2, r3, #7
 80014da:	4965      	ldr	r1, [pc, #404]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0b8      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a58      	ldr	r2, [pc, #352]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a52      	ldr	r2, [pc, #328]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800152e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001530:	4b50      	ldr	r3, [pc, #320]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	494d      	ldr	r1, [pc, #308]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d040      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e07f      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e073      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e06b      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158e:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f023 0203 	bic.w	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4936      	ldr	r1, [pc, #216]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fa6c 	bl	8000a7c <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	e00a      	b.n	80015be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a8:	f7ff fa68 	bl	8000a7c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e053      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 020c 	and.w	r2, r3, #12
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d1eb      	bne.n	80015a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d210      	bcs.n	8001600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 0207 	bic.w	r2, r3, #7
 80015e6:	4922      	ldr	r1, [pc, #136]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e032      	b.n	8001666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4916      	ldr	r1, [pc, #88]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	4313      	orrs	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800163e:	f000 f821 	bl	8001684 <HAL_RCC_GetSysClockFreq>
 8001642:	4601      	mov	r1, r0
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_RCC_ClockConfig+0x1c8>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	fa21 f303 	lsr.w	r3, r1, r3
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1cc>)
 8001658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_ClockConfig+0x1d0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff f9ca 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	40021000 	.word	0x40021000
 8001678:	08003304 	.word	0x08003304
 800167c:	20000008 	.word	0x20000008
 8001680:	2000000c 	.word	0x2000000c

08001684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001684:	b490      	push	{r4, r7}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_GetSysClockFreq+0xb0>)
 800168c:	1d3c      	adds	r4, r7, #4
 800168e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d002      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x40>
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d003      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0x46>
 80016c2:	e02d      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016c6:	623b      	str	r3, [r7, #32]
      break;
 80016c8:	e02d      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	0c9b      	lsrs	r3, r3, #18
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016d6:	4413      	add	r3, r2
 80016d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	0c5b      	lsrs	r3, r3, #17
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016f6:	4413      	add	r3, r2
 80016f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001702:	fb02 f203 	mul.w	r2, r2, r3
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
 800170e:	e004      	b.n	800171a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	623b      	str	r3, [r7, #32]
      break;
 800171e:	e002      	b.n	8001726 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001722:	623b      	str	r3, [r7, #32]
      break;
 8001724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001726:	6a3b      	ldr	r3, [r7, #32]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bc90      	pop	{r4, r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	0800251c 	.word	0x0800251c
 8001738:	0800252c 	.word	0x0800252c
 800173c:	40021000 	.word	0x40021000
 8001740:	007a1200 	.word	0x007a1200
 8001744:	003d0900 	.word	0x003d0900

08001748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <RCC_Delay+0x34>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <RCC_Delay+0x38>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0a5b      	lsrs	r3, r3, #9
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001764:	bf00      	nop
  }
  while (Delay --);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <RCC_Delay+0x1c>
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e076      	b.n	8001884 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017a6:	d009      	beq.n	80017bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
 80017ae:	e005      	b.n	80017bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff f830 	bl	800083c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001840:	ea42 0103 	orr.w	r1, r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	0c1a      	lsrs	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f002 0204 	and.w	r2, r2, #4
 8001862:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001872:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_SPI_Transmit+0x22>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e126      	b.n	8001afc <HAL_SPI_Transmit+0x270>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018b6:	f7ff f8e1 	bl	8000a7c <HAL_GetTick>
 80018ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018d0:	e10b      	b.n	8001aea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_SPI_Transmit+0x52>
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018e2:	e102      	b.n	8001aea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2203      	movs	r2, #3
 80018e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800192a:	d10f      	bne.n	800194c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800194a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001956:	2b40      	cmp	r3, #64	; 0x40
 8001958:	d007      	beq.n	800196a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001972:	d14b      	bne.n	8001a0c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HAL_SPI_Transmit+0xf6>
 800197c:	8afb      	ldrh	r3, [r7, #22]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d13e      	bne.n	8001a00 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	881a      	ldrh	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	1c9a      	adds	r2, r3, #2
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019a6:	e02b      	b.n	8001a00 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d112      	bne.n	80019dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	1c9a      	adds	r2, r3, #2
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80019da:	e011      	b.n	8001a00 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019dc:	f7ff f84e 	bl	8000a7c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d803      	bhi.n	80019f4 <HAL_SPI_Transmit+0x168>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f2:	d102      	bne.n	80019fa <HAL_SPI_Transmit+0x16e>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019fe:	e074      	b.n	8001aea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ce      	bne.n	80019a8 <HAL_SPI_Transmit+0x11c>
 8001a0a:	e04c      	b.n	8001aa6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_SPI_Transmit+0x18e>
 8001a14:	8afb      	ldrh	r3, [r7, #22]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d140      	bne.n	8001a9c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	330c      	adds	r3, #12
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a40:	e02c      	b.n	8001a9c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d113      	bne.n	8001a78 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a76:	e011      	b.n	8001a9c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a78:	f7ff f800 	bl	8000a7c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d803      	bhi.n	8001a90 <HAL_SPI_Transmit+0x204>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d102      	bne.n	8001a96 <HAL_SPI_Transmit+0x20a>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a9a:	e026      	b.n	8001aea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1cd      	bne.n	8001a42 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f8b2 	bl	8001c14 <SPI_EndRxTxTransaction>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]
 8001ae6:	e000      	b.n	8001aea <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ae8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001b14:	f7fe ffb2 	bl	8000a7c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001b24:	f7fe ffaa 	bl	8000a7c <HAL_GetTick>
 8001b28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001b2a:	4b39      	ldr	r3, [pc, #228]	; (8001c10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	0d1b      	lsrs	r3, r3, #20
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b3a:	e054      	b.n	8001be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b42:	d050      	beq.n	8001be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b44:	f7fe ff9a 	bl	8000a7c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d902      	bls.n	8001b5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d13d      	bne.n	8001bd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b72:	d111      	bne.n	8001b98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b7c:	d004      	beq.n	8001b88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b86:	d107      	bne.n	8001b98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba0:	d10f      	bne.n	8001bc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e017      	b.n	8001c06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d19b      	bne.n	8001b3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008

08001c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff ff6a 	bl	8001b04 <SPI_WaitFlagStateUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e000      	b.n	8001c48 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <__errno>:
 8001c50:	4b01      	ldr	r3, [pc, #4]	; (8001c58 <__errno+0x8>)
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000014 	.word	0x20000014

08001c5c <__libc_init_array>:
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	2500      	movs	r5, #0
 8001c60:	4e0c      	ldr	r6, [pc, #48]	; (8001c94 <__libc_init_array+0x38>)
 8001c62:	4c0d      	ldr	r4, [pc, #52]	; (8001c98 <__libc_init_array+0x3c>)
 8001c64:	1ba4      	subs	r4, r4, r6
 8001c66:	10a4      	asrs	r4, r4, #2
 8001c68:	42a5      	cmp	r5, r4
 8001c6a:	d109      	bne.n	8001c80 <__libc_init_array+0x24>
 8001c6c:	f000 fc34 	bl	80024d8 <_init>
 8001c70:	2500      	movs	r5, #0
 8001c72:	4e0a      	ldr	r6, [pc, #40]	; (8001c9c <__libc_init_array+0x40>)
 8001c74:	4c0a      	ldr	r4, [pc, #40]	; (8001ca0 <__libc_init_array+0x44>)
 8001c76:	1ba4      	subs	r4, r4, r6
 8001c78:	10a4      	asrs	r4, r4, #2
 8001c7a:	42a5      	cmp	r5, r4
 8001c7c:	d105      	bne.n	8001c8a <__libc_init_array+0x2e>
 8001c7e:	bd70      	pop	{r4, r5, r6, pc}
 8001c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c84:	4798      	blx	r3
 8001c86:	3501      	adds	r5, #1
 8001c88:	e7ee      	b.n	8001c68 <__libc_init_array+0xc>
 8001c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c8e:	4798      	blx	r3
 8001c90:	3501      	adds	r5, #1
 8001c92:	e7f2      	b.n	8001c7a <__libc_init_array+0x1e>
 8001c94:	08003348 	.word	0x08003348
 8001c98:	08003348 	.word	0x08003348
 8001c9c:	08003348 	.word	0x08003348
 8001ca0:	0800334c 	.word	0x0800334c

08001ca4 <memset>:
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4402      	add	r2, r0
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d100      	bne.n	8001cae <memset+0xa>
 8001cac:	4770      	bx	lr
 8001cae:	f803 1b01 	strb.w	r1, [r3], #1
 8001cb2:	e7f9      	b.n	8001ca8 <memset+0x4>

08001cb4 <_free_r>:
 8001cb4:	b538      	push	{r3, r4, r5, lr}
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	2900      	cmp	r1, #0
 8001cba:	d043      	beq.n	8001d44 <_free_r+0x90>
 8001cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cc0:	1f0c      	subs	r4, r1, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bfb8      	it	lt
 8001cc6:	18e4      	addlt	r4, r4, r3
 8001cc8:	f000 f8ca 	bl	8001e60 <__malloc_lock>
 8001ccc:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <_free_r+0x94>)
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	b933      	cbnz	r3, 8001ce2 <_free_r+0x2e>
 8001cd4:	6063      	str	r3, [r4, #4]
 8001cd6:	6014      	str	r4, [r2, #0]
 8001cd8:	4628      	mov	r0, r5
 8001cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cde:	f000 b8c0 	b.w	8001e62 <__malloc_unlock>
 8001ce2:	42a3      	cmp	r3, r4
 8001ce4:	d90b      	bls.n	8001cfe <_free_r+0x4a>
 8001ce6:	6821      	ldr	r1, [r4, #0]
 8001ce8:	1862      	adds	r2, r4, r1
 8001cea:	4293      	cmp	r3, r2
 8001cec:	bf01      	itttt	eq
 8001cee:	681a      	ldreq	r2, [r3, #0]
 8001cf0:	685b      	ldreq	r3, [r3, #4]
 8001cf2:	1852      	addeq	r2, r2, r1
 8001cf4:	6022      	streq	r2, [r4, #0]
 8001cf6:	6063      	str	r3, [r4, #4]
 8001cf8:	6004      	str	r4, [r0, #0]
 8001cfa:	e7ed      	b.n	8001cd8 <_free_r+0x24>
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	b10a      	cbz	r2, 8001d06 <_free_r+0x52>
 8001d02:	42a2      	cmp	r2, r4
 8001d04:	d9fa      	bls.n	8001cfc <_free_r+0x48>
 8001d06:	6819      	ldr	r1, [r3, #0]
 8001d08:	1858      	adds	r0, r3, r1
 8001d0a:	42a0      	cmp	r0, r4
 8001d0c:	d10b      	bne.n	8001d26 <_free_r+0x72>
 8001d0e:	6820      	ldr	r0, [r4, #0]
 8001d10:	4401      	add	r1, r0
 8001d12:	1858      	adds	r0, r3, r1
 8001d14:	4282      	cmp	r2, r0
 8001d16:	6019      	str	r1, [r3, #0]
 8001d18:	d1de      	bne.n	8001cd8 <_free_r+0x24>
 8001d1a:	6810      	ldr	r0, [r2, #0]
 8001d1c:	6852      	ldr	r2, [r2, #4]
 8001d1e:	4401      	add	r1, r0
 8001d20:	6019      	str	r1, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	e7d8      	b.n	8001cd8 <_free_r+0x24>
 8001d26:	d902      	bls.n	8001d2e <_free_r+0x7a>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	e7d4      	b.n	8001cd8 <_free_r+0x24>
 8001d2e:	6820      	ldr	r0, [r4, #0]
 8001d30:	1821      	adds	r1, r4, r0
 8001d32:	428a      	cmp	r2, r1
 8001d34:	bf01      	itttt	eq
 8001d36:	6811      	ldreq	r1, [r2, #0]
 8001d38:	6852      	ldreq	r2, [r2, #4]
 8001d3a:	1809      	addeq	r1, r1, r0
 8001d3c:	6021      	streq	r1, [r4, #0]
 8001d3e:	6062      	str	r2, [r4, #4]
 8001d40:	605c      	str	r4, [r3, #4]
 8001d42:	e7c9      	b.n	8001cd8 <_free_r+0x24>
 8001d44:	bd38      	pop	{r3, r4, r5, pc}
 8001d46:	bf00      	nop
 8001d48:	2000009c 	.word	0x2000009c

08001d4c <_malloc_r>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	1ccd      	adds	r5, r1, #3
 8001d50:	f025 0503 	bic.w	r5, r5, #3
 8001d54:	3508      	adds	r5, #8
 8001d56:	2d0c      	cmp	r5, #12
 8001d58:	bf38      	it	cc
 8001d5a:	250c      	movcc	r5, #12
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	4606      	mov	r6, r0
 8001d60:	db01      	blt.n	8001d66 <_malloc_r+0x1a>
 8001d62:	42a9      	cmp	r1, r5
 8001d64:	d903      	bls.n	8001d6e <_malloc_r+0x22>
 8001d66:	230c      	movs	r3, #12
 8001d68:	6033      	str	r3, [r6, #0]
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
 8001d6e:	f000 f877 	bl	8001e60 <__malloc_lock>
 8001d72:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <_malloc_r+0xac>)
 8001d74:	6814      	ldr	r4, [r2, #0]
 8001d76:	4621      	mov	r1, r4
 8001d78:	b991      	cbnz	r1, 8001da0 <_malloc_r+0x54>
 8001d7a:	4c20      	ldr	r4, [pc, #128]	; (8001dfc <_malloc_r+0xb0>)
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	b91b      	cbnz	r3, 8001d88 <_malloc_r+0x3c>
 8001d80:	4630      	mov	r0, r6
 8001d82:	f000 f83d 	bl	8001e00 <_sbrk_r>
 8001d86:	6020      	str	r0, [r4, #0]
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f000 f838 	bl	8001e00 <_sbrk_r>
 8001d90:	1c43      	adds	r3, r0, #1
 8001d92:	d124      	bne.n	8001dde <_malloc_r+0x92>
 8001d94:	230c      	movs	r3, #12
 8001d96:	4630      	mov	r0, r6
 8001d98:	6033      	str	r3, [r6, #0]
 8001d9a:	f000 f862 	bl	8001e62 <__malloc_unlock>
 8001d9e:	e7e4      	b.n	8001d6a <_malloc_r+0x1e>
 8001da0:	680b      	ldr	r3, [r1, #0]
 8001da2:	1b5b      	subs	r3, r3, r5
 8001da4:	d418      	bmi.n	8001dd8 <_malloc_r+0x8c>
 8001da6:	2b0b      	cmp	r3, #11
 8001da8:	d90f      	bls.n	8001dca <_malloc_r+0x7e>
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	18cc      	adds	r4, r1, r3
 8001dae:	50cd      	str	r5, [r1, r3]
 8001db0:	4630      	mov	r0, r6
 8001db2:	f000 f856 	bl	8001e62 <__malloc_unlock>
 8001db6:	f104 000b 	add.w	r0, r4, #11
 8001dba:	1d23      	adds	r3, r4, #4
 8001dbc:	f020 0007 	bic.w	r0, r0, #7
 8001dc0:	1ac3      	subs	r3, r0, r3
 8001dc2:	d0d3      	beq.n	8001d6c <_malloc_r+0x20>
 8001dc4:	425a      	negs	r2, r3
 8001dc6:	50e2      	str	r2, [r4, r3]
 8001dc8:	e7d0      	b.n	8001d6c <_malloc_r+0x20>
 8001dca:	684b      	ldr	r3, [r1, #4]
 8001dcc:	428c      	cmp	r4, r1
 8001dce:	bf16      	itet	ne
 8001dd0:	6063      	strne	r3, [r4, #4]
 8001dd2:	6013      	streq	r3, [r2, #0]
 8001dd4:	460c      	movne	r4, r1
 8001dd6:	e7eb      	b.n	8001db0 <_malloc_r+0x64>
 8001dd8:	460c      	mov	r4, r1
 8001dda:	6849      	ldr	r1, [r1, #4]
 8001ddc:	e7cc      	b.n	8001d78 <_malloc_r+0x2c>
 8001dde:	1cc4      	adds	r4, r0, #3
 8001de0:	f024 0403 	bic.w	r4, r4, #3
 8001de4:	42a0      	cmp	r0, r4
 8001de6:	d005      	beq.n	8001df4 <_malloc_r+0xa8>
 8001de8:	1a21      	subs	r1, r4, r0
 8001dea:	4630      	mov	r0, r6
 8001dec:	f000 f808 	bl	8001e00 <_sbrk_r>
 8001df0:	3001      	adds	r0, #1
 8001df2:	d0cf      	beq.n	8001d94 <_malloc_r+0x48>
 8001df4:	6025      	str	r5, [r4, #0]
 8001df6:	e7db      	b.n	8001db0 <_malloc_r+0x64>
 8001df8:	2000009c 	.word	0x2000009c
 8001dfc:	200000a0 	.word	0x200000a0

08001e00 <_sbrk_r>:
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	2300      	movs	r3, #0
 8001e04:	4c05      	ldr	r4, [pc, #20]	; (8001e1c <_sbrk_r+0x1c>)
 8001e06:	4605      	mov	r5, r0
 8001e08:	4608      	mov	r0, r1
 8001e0a:	6023      	str	r3, [r4, #0]
 8001e0c:	f7fe fd7c 	bl	8000908 <_sbrk>
 8001e10:	1c43      	adds	r3, r0, #1
 8001e12:	d102      	bne.n	8001e1a <_sbrk_r+0x1a>
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	b103      	cbz	r3, 8001e1a <_sbrk_r+0x1a>
 8001e18:	602b      	str	r3, [r5, #0]
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	20000120 	.word	0x20000120

08001e20 <siprintf>:
 8001e20:	b40e      	push	{r1, r2, r3}
 8001e22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e26:	b500      	push	{lr}
 8001e28:	b09c      	sub	sp, #112	; 0x70
 8001e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8001e2c:	9002      	str	r0, [sp, #8]
 8001e2e:	9006      	str	r0, [sp, #24]
 8001e30:	9107      	str	r1, [sp, #28]
 8001e32:	9104      	str	r1, [sp, #16]
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <siprintf+0x38>)
 8001e36:	4909      	ldr	r1, [pc, #36]	; (8001e5c <siprintf+0x3c>)
 8001e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e3c:	9105      	str	r1, [sp, #20]
 8001e3e:	6800      	ldr	r0, [r0, #0]
 8001e40:	a902      	add	r1, sp, #8
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	f000 f868 	bl	8001f18 <_svfiprintf_r>
 8001e48:	2200      	movs	r2, #0
 8001e4a:	9b02      	ldr	r3, [sp, #8]
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	b01c      	add	sp, #112	; 0x70
 8001e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e54:	b003      	add	sp, #12
 8001e56:	4770      	bx	lr
 8001e58:	20000014 	.word	0x20000014
 8001e5c:	ffff0208 	.word	0xffff0208

08001e60 <__malloc_lock>:
 8001e60:	4770      	bx	lr

08001e62 <__malloc_unlock>:
 8001e62:	4770      	bx	lr

08001e64 <__ssputs_r>:
 8001e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e68:	688e      	ldr	r6, [r1, #8]
 8001e6a:	4682      	mov	sl, r0
 8001e6c:	429e      	cmp	r6, r3
 8001e6e:	460c      	mov	r4, r1
 8001e70:	4690      	mov	r8, r2
 8001e72:	4699      	mov	r9, r3
 8001e74:	d837      	bhi.n	8001ee6 <__ssputs_r+0x82>
 8001e76:	898a      	ldrh	r2, [r1, #12]
 8001e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e7c:	d031      	beq.n	8001ee2 <__ssputs_r+0x7e>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	6825      	ldr	r5, [r4, #0]
 8001e82:	6909      	ldr	r1, [r1, #16]
 8001e84:	1a6f      	subs	r7, r5, r1
 8001e86:	6965      	ldr	r5, [r4, #20]
 8001e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8001e90:	f109 0301 	add.w	r3, r9, #1
 8001e94:	443b      	add	r3, r7
 8001e96:	429d      	cmp	r5, r3
 8001e98:	bf38      	it	cc
 8001e9a:	461d      	movcc	r5, r3
 8001e9c:	0553      	lsls	r3, r2, #21
 8001e9e:	d530      	bpl.n	8001f02 <__ssputs_r+0x9e>
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7ff ff53 	bl	8001d4c <_malloc_r>
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	b950      	cbnz	r0, 8001ec0 <__ssputs_r+0x5c>
 8001eaa:	230c      	movs	r3, #12
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f8ca 3000 	str.w	r3, [sl]
 8001eb4:	89a3      	ldrh	r3, [r4, #12]
 8001eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eba:	81a3      	strh	r3, [r4, #12]
 8001ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec0:	463a      	mov	r2, r7
 8001ec2:	6921      	ldr	r1, [r4, #16]
 8001ec4:	f000 fab6 	bl	8002434 <memcpy>
 8001ec8:	89a3      	ldrh	r3, [r4, #12]
 8001eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed2:	81a3      	strh	r3, [r4, #12]
 8001ed4:	6126      	str	r6, [r4, #16]
 8001ed6:	443e      	add	r6, r7
 8001ed8:	6026      	str	r6, [r4, #0]
 8001eda:	464e      	mov	r6, r9
 8001edc:	6165      	str	r5, [r4, #20]
 8001ede:	1bed      	subs	r5, r5, r7
 8001ee0:	60a5      	str	r5, [r4, #8]
 8001ee2:	454e      	cmp	r6, r9
 8001ee4:	d900      	bls.n	8001ee8 <__ssputs_r+0x84>
 8001ee6:	464e      	mov	r6, r9
 8001ee8:	4632      	mov	r2, r6
 8001eea:	4641      	mov	r1, r8
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	f000 faac 	bl	800244a <memmove>
 8001ef2:	68a3      	ldr	r3, [r4, #8]
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	1b9b      	subs	r3, r3, r6
 8001ef8:	60a3      	str	r3, [r4, #8]
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	441e      	add	r6, r3
 8001efe:	6026      	str	r6, [r4, #0]
 8001f00:	e7dc      	b.n	8001ebc <__ssputs_r+0x58>
 8001f02:	462a      	mov	r2, r5
 8001f04:	f000 faba 	bl	800247c <_realloc_r>
 8001f08:	4606      	mov	r6, r0
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d1e2      	bne.n	8001ed4 <__ssputs_r+0x70>
 8001f0e:	6921      	ldr	r1, [r4, #16]
 8001f10:	4650      	mov	r0, sl
 8001f12:	f7ff fecf 	bl	8001cb4 <_free_r>
 8001f16:	e7c8      	b.n	8001eaa <__ssputs_r+0x46>

08001f18 <_svfiprintf_r>:
 8001f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	898b      	ldrh	r3, [r1, #12]
 8001f20:	b09d      	sub	sp, #116	; 0x74
 8001f22:	061f      	lsls	r7, r3, #24
 8001f24:	4680      	mov	r8, r0
 8001f26:	460c      	mov	r4, r1
 8001f28:	4616      	mov	r6, r2
 8001f2a:	d50f      	bpl.n	8001f4c <_svfiprintf_r+0x34>
 8001f2c:	690b      	ldr	r3, [r1, #16]
 8001f2e:	b96b      	cbnz	r3, 8001f4c <_svfiprintf_r+0x34>
 8001f30:	2140      	movs	r1, #64	; 0x40
 8001f32:	f7ff ff0b 	bl	8001d4c <_malloc_r>
 8001f36:	6020      	str	r0, [r4, #0]
 8001f38:	6120      	str	r0, [r4, #16]
 8001f3a:	b928      	cbnz	r0, 8001f48 <_svfiprintf_r+0x30>
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	f8c8 3000 	str.w	r3, [r8]
 8001f42:	f04f 30ff 	mov.w	r0, #4294967295
 8001f46:	e0c8      	b.n	80020da <_svfiprintf_r+0x1c2>
 8001f48:	2340      	movs	r3, #64	; 0x40
 8001f4a:	6163      	str	r3, [r4, #20]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f50:	2320      	movs	r3, #32
 8001f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f56:	2330      	movs	r3, #48	; 0x30
 8001f58:	f04f 0b01 	mov.w	fp, #1
 8001f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f60:	9503      	str	r5, [sp, #12]
 8001f62:	4637      	mov	r7, r6
 8001f64:	463d      	mov	r5, r7
 8001f66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001f6a:	b10b      	cbz	r3, 8001f70 <_svfiprintf_r+0x58>
 8001f6c:	2b25      	cmp	r3, #37	; 0x25
 8001f6e:	d13e      	bne.n	8001fee <_svfiprintf_r+0xd6>
 8001f70:	ebb7 0a06 	subs.w	sl, r7, r6
 8001f74:	d00b      	beq.n	8001f8e <_svfiprintf_r+0x76>
 8001f76:	4653      	mov	r3, sl
 8001f78:	4632      	mov	r2, r6
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	4640      	mov	r0, r8
 8001f7e:	f7ff ff71 	bl	8001e64 <__ssputs_r>
 8001f82:	3001      	adds	r0, #1
 8001f84:	f000 80a4 	beq.w	80020d0 <_svfiprintf_r+0x1b8>
 8001f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f8a:	4453      	add	r3, sl
 8001f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f8e:	783b      	ldrb	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 809d 	beq.w	80020d0 <_svfiprintf_r+0x1b8>
 8001f96:	2300      	movs	r3, #0
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fa0:	9304      	str	r3, [sp, #16]
 8001fa2:	9307      	str	r3, [sp, #28]
 8001fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8001faa:	462f      	mov	r7, r5
 8001fac:	2205      	movs	r2, #5
 8001fae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001fb2:	4850      	ldr	r0, [pc, #320]	; (80020f4 <_svfiprintf_r+0x1dc>)
 8001fb4:	f000 fa30 	bl	8002418 <memchr>
 8001fb8:	9b04      	ldr	r3, [sp, #16]
 8001fba:	b9d0      	cbnz	r0, 8001ff2 <_svfiprintf_r+0xda>
 8001fbc:	06d9      	lsls	r1, r3, #27
 8001fbe:	bf44      	itt	mi
 8001fc0:	2220      	movmi	r2, #32
 8001fc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fc6:	071a      	lsls	r2, r3, #28
 8001fc8:	bf44      	itt	mi
 8001fca:	222b      	movmi	r2, #43	; 0x2b
 8001fcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001fd0:	782a      	ldrb	r2, [r5, #0]
 8001fd2:	2a2a      	cmp	r2, #42	; 0x2a
 8001fd4:	d015      	beq.n	8002002 <_svfiprintf_r+0xea>
 8001fd6:	462f      	mov	r7, r5
 8001fd8:	2000      	movs	r0, #0
 8001fda:	250a      	movs	r5, #10
 8001fdc:	9a07      	ldr	r2, [sp, #28]
 8001fde:	4639      	mov	r1, r7
 8001fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fe4:	3b30      	subs	r3, #48	; 0x30
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d94d      	bls.n	8002086 <_svfiprintf_r+0x16e>
 8001fea:	b1b8      	cbz	r0, 800201c <_svfiprintf_r+0x104>
 8001fec:	e00f      	b.n	800200e <_svfiprintf_r+0xf6>
 8001fee:	462f      	mov	r7, r5
 8001ff0:	e7b8      	b.n	8001f64 <_svfiprintf_r+0x4c>
 8001ff2:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <_svfiprintf_r+0x1dc>)
 8001ff4:	463d      	mov	r5, r7
 8001ff6:	1a80      	subs	r0, r0, r2
 8001ff8:	fa0b f000 	lsl.w	r0, fp, r0
 8001ffc:	4318      	orrs	r0, r3
 8001ffe:	9004      	str	r0, [sp, #16]
 8002000:	e7d3      	b.n	8001faa <_svfiprintf_r+0x92>
 8002002:	9a03      	ldr	r2, [sp, #12]
 8002004:	1d11      	adds	r1, r2, #4
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	9103      	str	r1, [sp, #12]
 800200a:	2a00      	cmp	r2, #0
 800200c:	db01      	blt.n	8002012 <_svfiprintf_r+0xfa>
 800200e:	9207      	str	r2, [sp, #28]
 8002010:	e004      	b.n	800201c <_svfiprintf_r+0x104>
 8002012:	4252      	negs	r2, r2
 8002014:	f043 0302 	orr.w	r3, r3, #2
 8002018:	9207      	str	r2, [sp, #28]
 800201a:	9304      	str	r3, [sp, #16]
 800201c:	783b      	ldrb	r3, [r7, #0]
 800201e:	2b2e      	cmp	r3, #46	; 0x2e
 8002020:	d10c      	bne.n	800203c <_svfiprintf_r+0x124>
 8002022:	787b      	ldrb	r3, [r7, #1]
 8002024:	2b2a      	cmp	r3, #42	; 0x2a
 8002026:	d133      	bne.n	8002090 <_svfiprintf_r+0x178>
 8002028:	9b03      	ldr	r3, [sp, #12]
 800202a:	3702      	adds	r7, #2
 800202c:	1d1a      	adds	r2, r3, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	9203      	str	r2, [sp, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	bfb8      	it	lt
 8002036:	f04f 33ff 	movlt.w	r3, #4294967295
 800203a:	9305      	str	r3, [sp, #20]
 800203c:	4d2e      	ldr	r5, [pc, #184]	; (80020f8 <_svfiprintf_r+0x1e0>)
 800203e:	2203      	movs	r2, #3
 8002040:	7839      	ldrb	r1, [r7, #0]
 8002042:	4628      	mov	r0, r5
 8002044:	f000 f9e8 	bl	8002418 <memchr>
 8002048:	b138      	cbz	r0, 800205a <_svfiprintf_r+0x142>
 800204a:	2340      	movs	r3, #64	; 0x40
 800204c:	1b40      	subs	r0, r0, r5
 800204e:	fa03 f000 	lsl.w	r0, r3, r0
 8002052:	9b04      	ldr	r3, [sp, #16]
 8002054:	3701      	adds	r7, #1
 8002056:	4303      	orrs	r3, r0
 8002058:	9304      	str	r3, [sp, #16]
 800205a:	7839      	ldrb	r1, [r7, #0]
 800205c:	2206      	movs	r2, #6
 800205e:	4827      	ldr	r0, [pc, #156]	; (80020fc <_svfiprintf_r+0x1e4>)
 8002060:	1c7e      	adds	r6, r7, #1
 8002062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002066:	f000 f9d7 	bl	8002418 <memchr>
 800206a:	2800      	cmp	r0, #0
 800206c:	d038      	beq.n	80020e0 <_svfiprintf_r+0x1c8>
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <_svfiprintf_r+0x1e8>)
 8002070:	bb13      	cbnz	r3, 80020b8 <_svfiprintf_r+0x1a0>
 8002072:	9b03      	ldr	r3, [sp, #12]
 8002074:	3307      	adds	r3, #7
 8002076:	f023 0307 	bic.w	r3, r3, #7
 800207a:	3308      	adds	r3, #8
 800207c:	9303      	str	r3, [sp, #12]
 800207e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002080:	444b      	add	r3, r9
 8002082:	9309      	str	r3, [sp, #36]	; 0x24
 8002084:	e76d      	b.n	8001f62 <_svfiprintf_r+0x4a>
 8002086:	fb05 3202 	mla	r2, r5, r2, r3
 800208a:	2001      	movs	r0, #1
 800208c:	460f      	mov	r7, r1
 800208e:	e7a6      	b.n	8001fde <_svfiprintf_r+0xc6>
 8002090:	2300      	movs	r3, #0
 8002092:	250a      	movs	r5, #10
 8002094:	4619      	mov	r1, r3
 8002096:	3701      	adds	r7, #1
 8002098:	9305      	str	r3, [sp, #20]
 800209a:	4638      	mov	r0, r7
 800209c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020a0:	3a30      	subs	r2, #48	; 0x30
 80020a2:	2a09      	cmp	r2, #9
 80020a4:	d903      	bls.n	80020ae <_svfiprintf_r+0x196>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0c8      	beq.n	800203c <_svfiprintf_r+0x124>
 80020aa:	9105      	str	r1, [sp, #20]
 80020ac:	e7c6      	b.n	800203c <_svfiprintf_r+0x124>
 80020ae:	fb05 2101 	mla	r1, r5, r1, r2
 80020b2:	2301      	movs	r3, #1
 80020b4:	4607      	mov	r7, r0
 80020b6:	e7f0      	b.n	800209a <_svfiprintf_r+0x182>
 80020b8:	ab03      	add	r3, sp, #12
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4622      	mov	r2, r4
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <_svfiprintf_r+0x1ec>)
 80020c0:	a904      	add	r1, sp, #16
 80020c2:	4640      	mov	r0, r8
 80020c4:	f3af 8000 	nop.w
 80020c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80020cc:	4681      	mov	r9, r0
 80020ce:	d1d6      	bne.n	800207e <_svfiprintf_r+0x166>
 80020d0:	89a3      	ldrh	r3, [r4, #12]
 80020d2:	065b      	lsls	r3, r3, #25
 80020d4:	f53f af35 	bmi.w	8001f42 <_svfiprintf_r+0x2a>
 80020d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020da:	b01d      	add	sp, #116	; 0x74
 80020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e0:	ab03      	add	r3, sp, #12
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	4622      	mov	r2, r4
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_svfiprintf_r+0x1ec>)
 80020e8:	a904      	add	r1, sp, #16
 80020ea:	4640      	mov	r0, r8
 80020ec:	f000 f882 	bl	80021f4 <_printf_i>
 80020f0:	e7ea      	b.n	80020c8 <_svfiprintf_r+0x1b0>
 80020f2:	bf00      	nop
 80020f4:	08003314 	.word	0x08003314
 80020f8:	0800331a 	.word	0x0800331a
 80020fc:	0800331e 	.word	0x0800331e
 8002100:	00000000 	.word	0x00000000
 8002104:	08001e65 	.word	0x08001e65

08002108 <_printf_common>:
 8002108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800210c:	4691      	mov	r9, r2
 800210e:	461f      	mov	r7, r3
 8002110:	688a      	ldr	r2, [r1, #8]
 8002112:	690b      	ldr	r3, [r1, #16]
 8002114:	4606      	mov	r6, r0
 8002116:	4293      	cmp	r3, r2
 8002118:	bfb8      	it	lt
 800211a:	4613      	movlt	r3, r2
 800211c:	f8c9 3000 	str.w	r3, [r9]
 8002120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002124:	460c      	mov	r4, r1
 8002126:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800212a:	b112      	cbz	r2, 8002132 <_printf_common+0x2a>
 800212c:	3301      	adds	r3, #1
 800212e:	f8c9 3000 	str.w	r3, [r9]
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	0699      	lsls	r1, r3, #26
 8002136:	bf42      	ittt	mi
 8002138:	f8d9 3000 	ldrmi.w	r3, [r9]
 800213c:	3302      	addmi	r3, #2
 800213e:	f8c9 3000 	strmi.w	r3, [r9]
 8002142:	6825      	ldr	r5, [r4, #0]
 8002144:	f015 0506 	ands.w	r5, r5, #6
 8002148:	d107      	bne.n	800215a <_printf_common+0x52>
 800214a:	f104 0a19 	add.w	sl, r4, #25
 800214e:	68e3      	ldr	r3, [r4, #12]
 8002150:	f8d9 2000 	ldr.w	r2, [r9]
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	42ab      	cmp	r3, r5
 8002158:	dc29      	bgt.n	80021ae <_printf_common+0xa6>
 800215a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	3300      	adds	r3, #0
 8002162:	bf18      	it	ne
 8002164:	2301      	movne	r3, #1
 8002166:	0692      	lsls	r2, r2, #26
 8002168:	d42e      	bmi.n	80021c8 <_printf_common+0xc0>
 800216a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800216e:	4639      	mov	r1, r7
 8002170:	4630      	mov	r0, r6
 8002172:	47c0      	blx	r8
 8002174:	3001      	adds	r0, #1
 8002176:	d021      	beq.n	80021bc <_printf_common+0xb4>
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	68e5      	ldr	r5, [r4, #12]
 800217c:	f003 0306 	and.w	r3, r3, #6
 8002180:	2b04      	cmp	r3, #4
 8002182:	bf18      	it	ne
 8002184:	2500      	movne	r5, #0
 8002186:	f8d9 2000 	ldr.w	r2, [r9]
 800218a:	f04f 0900 	mov.w	r9, #0
 800218e:	bf08      	it	eq
 8002190:	1aad      	subeq	r5, r5, r2
 8002192:	68a3      	ldr	r3, [r4, #8]
 8002194:	6922      	ldr	r2, [r4, #16]
 8002196:	bf08      	it	eq
 8002198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800219c:	4293      	cmp	r3, r2
 800219e:	bfc4      	itt	gt
 80021a0:	1a9b      	subgt	r3, r3, r2
 80021a2:	18ed      	addgt	r5, r5, r3
 80021a4:	341a      	adds	r4, #26
 80021a6:	454d      	cmp	r5, r9
 80021a8:	d11a      	bne.n	80021e0 <_printf_common+0xd8>
 80021aa:	2000      	movs	r0, #0
 80021ac:	e008      	b.n	80021c0 <_printf_common+0xb8>
 80021ae:	2301      	movs	r3, #1
 80021b0:	4652      	mov	r2, sl
 80021b2:	4639      	mov	r1, r7
 80021b4:	4630      	mov	r0, r6
 80021b6:	47c0      	blx	r8
 80021b8:	3001      	adds	r0, #1
 80021ba:	d103      	bne.n	80021c4 <_printf_common+0xbc>
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c4:	3501      	adds	r5, #1
 80021c6:	e7c2      	b.n	800214e <_printf_common+0x46>
 80021c8:	2030      	movs	r0, #48	; 0x30
 80021ca:	18e1      	adds	r1, r4, r3
 80021cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021d6:	4422      	add	r2, r4
 80021d8:	3302      	adds	r3, #2
 80021da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021de:	e7c4      	b.n	800216a <_printf_common+0x62>
 80021e0:	2301      	movs	r3, #1
 80021e2:	4622      	mov	r2, r4
 80021e4:	4639      	mov	r1, r7
 80021e6:	4630      	mov	r0, r6
 80021e8:	47c0      	blx	r8
 80021ea:	3001      	adds	r0, #1
 80021ec:	d0e6      	beq.n	80021bc <_printf_common+0xb4>
 80021ee:	f109 0901 	add.w	r9, r9, #1
 80021f2:	e7d8      	b.n	80021a6 <_printf_common+0x9e>

080021f4 <_printf_i>:
 80021f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80021fc:	460c      	mov	r4, r1
 80021fe:	7e09      	ldrb	r1, [r1, #24]
 8002200:	b085      	sub	sp, #20
 8002202:	296e      	cmp	r1, #110	; 0x6e
 8002204:	4617      	mov	r7, r2
 8002206:	4606      	mov	r6, r0
 8002208:	4698      	mov	r8, r3
 800220a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800220c:	f000 80b3 	beq.w	8002376 <_printf_i+0x182>
 8002210:	d822      	bhi.n	8002258 <_printf_i+0x64>
 8002212:	2963      	cmp	r1, #99	; 0x63
 8002214:	d036      	beq.n	8002284 <_printf_i+0x90>
 8002216:	d80a      	bhi.n	800222e <_printf_i+0x3a>
 8002218:	2900      	cmp	r1, #0
 800221a:	f000 80b9 	beq.w	8002390 <_printf_i+0x19c>
 800221e:	2958      	cmp	r1, #88	; 0x58
 8002220:	f000 8083 	beq.w	800232a <_printf_i+0x136>
 8002224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002228:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800222c:	e032      	b.n	8002294 <_printf_i+0xa0>
 800222e:	2964      	cmp	r1, #100	; 0x64
 8002230:	d001      	beq.n	8002236 <_printf_i+0x42>
 8002232:	2969      	cmp	r1, #105	; 0x69
 8002234:	d1f6      	bne.n	8002224 <_printf_i+0x30>
 8002236:	6820      	ldr	r0, [r4, #0]
 8002238:	6813      	ldr	r3, [r2, #0]
 800223a:	0605      	lsls	r5, r0, #24
 800223c:	f103 0104 	add.w	r1, r3, #4
 8002240:	d52a      	bpl.n	8002298 <_printf_i+0xa4>
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6011      	str	r1, [r2, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da03      	bge.n	8002252 <_printf_i+0x5e>
 800224a:	222d      	movs	r2, #45	; 0x2d
 800224c:	425b      	negs	r3, r3
 800224e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002252:	486f      	ldr	r0, [pc, #444]	; (8002410 <_printf_i+0x21c>)
 8002254:	220a      	movs	r2, #10
 8002256:	e039      	b.n	80022cc <_printf_i+0xd8>
 8002258:	2973      	cmp	r1, #115	; 0x73
 800225a:	f000 809d 	beq.w	8002398 <_printf_i+0x1a4>
 800225e:	d808      	bhi.n	8002272 <_printf_i+0x7e>
 8002260:	296f      	cmp	r1, #111	; 0x6f
 8002262:	d020      	beq.n	80022a6 <_printf_i+0xb2>
 8002264:	2970      	cmp	r1, #112	; 0x70
 8002266:	d1dd      	bne.n	8002224 <_printf_i+0x30>
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	f043 0320 	orr.w	r3, r3, #32
 800226e:	6023      	str	r3, [r4, #0]
 8002270:	e003      	b.n	800227a <_printf_i+0x86>
 8002272:	2975      	cmp	r1, #117	; 0x75
 8002274:	d017      	beq.n	80022a6 <_printf_i+0xb2>
 8002276:	2978      	cmp	r1, #120	; 0x78
 8002278:	d1d4      	bne.n	8002224 <_printf_i+0x30>
 800227a:	2378      	movs	r3, #120	; 0x78
 800227c:	4865      	ldr	r0, [pc, #404]	; (8002414 <_printf_i+0x220>)
 800227e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002282:	e055      	b.n	8002330 <_printf_i+0x13c>
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800228a:	1d19      	adds	r1, r3, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6011      	str	r1, [r2, #0]
 8002290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002294:	2301      	movs	r3, #1
 8002296:	e08c      	b.n	80023b2 <_printf_i+0x1be>
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800229e:	6011      	str	r1, [r2, #0]
 80022a0:	bf18      	it	ne
 80022a2:	b21b      	sxthne	r3, r3
 80022a4:	e7cf      	b.n	8002246 <_printf_i+0x52>
 80022a6:	6813      	ldr	r3, [r2, #0]
 80022a8:	6825      	ldr	r5, [r4, #0]
 80022aa:	1d18      	adds	r0, r3, #4
 80022ac:	6010      	str	r0, [r2, #0]
 80022ae:	0628      	lsls	r0, r5, #24
 80022b0:	d501      	bpl.n	80022b6 <_printf_i+0xc2>
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	e002      	b.n	80022bc <_printf_i+0xc8>
 80022b6:	0668      	lsls	r0, r5, #25
 80022b8:	d5fb      	bpl.n	80022b2 <_printf_i+0xbe>
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	296f      	cmp	r1, #111	; 0x6f
 80022be:	bf14      	ite	ne
 80022c0:	220a      	movne	r2, #10
 80022c2:	2208      	moveq	r2, #8
 80022c4:	4852      	ldr	r0, [pc, #328]	; (8002410 <_printf_i+0x21c>)
 80022c6:	2100      	movs	r1, #0
 80022c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022cc:	6865      	ldr	r5, [r4, #4]
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	60a5      	str	r5, [r4, #8]
 80022d2:	f2c0 8095 	blt.w	8002400 <_printf_i+0x20c>
 80022d6:	6821      	ldr	r1, [r4, #0]
 80022d8:	f021 0104 	bic.w	r1, r1, #4
 80022dc:	6021      	str	r1, [r4, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d13d      	bne.n	800235e <_printf_i+0x16a>
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	f040 808e 	bne.w	8002404 <_printf_i+0x210>
 80022e8:	4665      	mov	r5, ip
 80022ea:	2a08      	cmp	r2, #8
 80022ec:	d10b      	bne.n	8002306 <_printf_i+0x112>
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	07db      	lsls	r3, r3, #31
 80022f2:	d508      	bpl.n	8002306 <_printf_i+0x112>
 80022f4:	6923      	ldr	r3, [r4, #16]
 80022f6:	6862      	ldr	r2, [r4, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	bfde      	ittt	le
 80022fc:	2330      	movle	r3, #48	; 0x30
 80022fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002302:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002306:	ebac 0305 	sub.w	r3, ip, r5
 800230a:	6123      	str	r3, [r4, #16]
 800230c:	f8cd 8000 	str.w	r8, [sp]
 8002310:	463b      	mov	r3, r7
 8002312:	aa03      	add	r2, sp, #12
 8002314:	4621      	mov	r1, r4
 8002316:	4630      	mov	r0, r6
 8002318:	f7ff fef6 	bl	8002108 <_printf_common>
 800231c:	3001      	adds	r0, #1
 800231e:	d14d      	bne.n	80023bc <_printf_i+0x1c8>
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	b005      	add	sp, #20
 8002326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800232a:	4839      	ldr	r0, [pc, #228]	; (8002410 <_printf_i+0x21c>)
 800232c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002330:	6813      	ldr	r3, [r2, #0]
 8002332:	6821      	ldr	r1, [r4, #0]
 8002334:	1d1d      	adds	r5, r3, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6015      	str	r5, [r2, #0]
 800233a:	060a      	lsls	r2, r1, #24
 800233c:	d50b      	bpl.n	8002356 <_printf_i+0x162>
 800233e:	07ca      	lsls	r2, r1, #31
 8002340:	bf44      	itt	mi
 8002342:	f041 0120 	orrmi.w	r1, r1, #32
 8002346:	6021      	strmi	r1, [r4, #0]
 8002348:	b91b      	cbnz	r3, 8002352 <_printf_i+0x15e>
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	f022 0220 	bic.w	r2, r2, #32
 8002350:	6022      	str	r2, [r4, #0]
 8002352:	2210      	movs	r2, #16
 8002354:	e7b7      	b.n	80022c6 <_printf_i+0xd2>
 8002356:	064d      	lsls	r5, r1, #25
 8002358:	bf48      	it	mi
 800235a:	b29b      	uxthmi	r3, r3
 800235c:	e7ef      	b.n	800233e <_printf_i+0x14a>
 800235e:	4665      	mov	r5, ip
 8002360:	fbb3 f1f2 	udiv	r1, r3, r2
 8002364:	fb02 3311 	mls	r3, r2, r1, r3
 8002368:	5cc3      	ldrb	r3, [r0, r3]
 800236a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800236e:	460b      	mov	r3, r1
 8002370:	2900      	cmp	r1, #0
 8002372:	d1f5      	bne.n	8002360 <_printf_i+0x16c>
 8002374:	e7b9      	b.n	80022ea <_printf_i+0xf6>
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	6825      	ldr	r5, [r4, #0]
 800237a:	1d18      	adds	r0, r3, #4
 800237c:	6961      	ldr	r1, [r4, #20]
 800237e:	6010      	str	r0, [r2, #0]
 8002380:	0628      	lsls	r0, r5, #24
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	d501      	bpl.n	800238a <_printf_i+0x196>
 8002386:	6019      	str	r1, [r3, #0]
 8002388:	e002      	b.n	8002390 <_printf_i+0x19c>
 800238a:	066a      	lsls	r2, r5, #25
 800238c:	d5fb      	bpl.n	8002386 <_printf_i+0x192>
 800238e:	8019      	strh	r1, [r3, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	4665      	mov	r5, ip
 8002394:	6123      	str	r3, [r4, #16]
 8002396:	e7b9      	b.n	800230c <_printf_i+0x118>
 8002398:	6813      	ldr	r3, [r2, #0]
 800239a:	1d19      	adds	r1, r3, #4
 800239c:	6011      	str	r1, [r2, #0]
 800239e:	681d      	ldr	r5, [r3, #0]
 80023a0:	6862      	ldr	r2, [r4, #4]
 80023a2:	2100      	movs	r1, #0
 80023a4:	4628      	mov	r0, r5
 80023a6:	f000 f837 	bl	8002418 <memchr>
 80023aa:	b108      	cbz	r0, 80023b0 <_printf_i+0x1bc>
 80023ac:	1b40      	subs	r0, r0, r5
 80023ae:	6060      	str	r0, [r4, #4]
 80023b0:	6863      	ldr	r3, [r4, #4]
 80023b2:	6123      	str	r3, [r4, #16]
 80023b4:	2300      	movs	r3, #0
 80023b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ba:	e7a7      	b.n	800230c <_printf_i+0x118>
 80023bc:	6923      	ldr	r3, [r4, #16]
 80023be:	462a      	mov	r2, r5
 80023c0:	4639      	mov	r1, r7
 80023c2:	4630      	mov	r0, r6
 80023c4:	47c0      	blx	r8
 80023c6:	3001      	adds	r0, #1
 80023c8:	d0aa      	beq.n	8002320 <_printf_i+0x12c>
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	079b      	lsls	r3, r3, #30
 80023ce:	d413      	bmi.n	80023f8 <_printf_i+0x204>
 80023d0:	68e0      	ldr	r0, [r4, #12]
 80023d2:	9b03      	ldr	r3, [sp, #12]
 80023d4:	4298      	cmp	r0, r3
 80023d6:	bfb8      	it	lt
 80023d8:	4618      	movlt	r0, r3
 80023da:	e7a3      	b.n	8002324 <_printf_i+0x130>
 80023dc:	2301      	movs	r3, #1
 80023de:	464a      	mov	r2, r9
 80023e0:	4639      	mov	r1, r7
 80023e2:	4630      	mov	r0, r6
 80023e4:	47c0      	blx	r8
 80023e6:	3001      	adds	r0, #1
 80023e8:	d09a      	beq.n	8002320 <_printf_i+0x12c>
 80023ea:	3501      	adds	r5, #1
 80023ec:	68e3      	ldr	r3, [r4, #12]
 80023ee:	9a03      	ldr	r2, [sp, #12]
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	42ab      	cmp	r3, r5
 80023f4:	dcf2      	bgt.n	80023dc <_printf_i+0x1e8>
 80023f6:	e7eb      	b.n	80023d0 <_printf_i+0x1dc>
 80023f8:	2500      	movs	r5, #0
 80023fa:	f104 0919 	add.w	r9, r4, #25
 80023fe:	e7f5      	b.n	80023ec <_printf_i+0x1f8>
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ac      	bne.n	800235e <_printf_i+0x16a>
 8002404:	7803      	ldrb	r3, [r0, #0]
 8002406:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800240a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800240e:	e76c      	b.n	80022ea <_printf_i+0xf6>
 8002410:	08003325 	.word	0x08003325
 8002414:	08003336 	.word	0x08003336

08002418 <memchr>:
 8002418:	b510      	push	{r4, lr}
 800241a:	b2c9      	uxtb	r1, r1
 800241c:	4402      	add	r2, r0
 800241e:	4290      	cmp	r0, r2
 8002420:	4603      	mov	r3, r0
 8002422:	d101      	bne.n	8002428 <memchr+0x10>
 8002424:	2300      	movs	r3, #0
 8002426:	e003      	b.n	8002430 <memchr+0x18>
 8002428:	781c      	ldrb	r4, [r3, #0]
 800242a:	3001      	adds	r0, #1
 800242c:	428c      	cmp	r4, r1
 800242e:	d1f6      	bne.n	800241e <memchr+0x6>
 8002430:	4618      	mov	r0, r3
 8002432:	bd10      	pop	{r4, pc}

08002434 <memcpy>:
 8002434:	b510      	push	{r4, lr}
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	440a      	add	r2, r1
 800243a:	4291      	cmp	r1, r2
 800243c:	d100      	bne.n	8002440 <memcpy+0xc>
 800243e:	bd10      	pop	{r4, pc}
 8002440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002448:	e7f7      	b.n	800243a <memcpy+0x6>

0800244a <memmove>:
 800244a:	4288      	cmp	r0, r1
 800244c:	b510      	push	{r4, lr}
 800244e:	eb01 0302 	add.w	r3, r1, r2
 8002452:	d807      	bhi.n	8002464 <memmove+0x1a>
 8002454:	1e42      	subs	r2, r0, #1
 8002456:	4299      	cmp	r1, r3
 8002458:	d00a      	beq.n	8002470 <memmove+0x26>
 800245a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800245e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002462:	e7f8      	b.n	8002456 <memmove+0xc>
 8002464:	4283      	cmp	r3, r0
 8002466:	d9f5      	bls.n	8002454 <memmove+0xa>
 8002468:	1881      	adds	r1, r0, r2
 800246a:	1ad2      	subs	r2, r2, r3
 800246c:	42d3      	cmn	r3, r2
 800246e:	d100      	bne.n	8002472 <memmove+0x28>
 8002470:	bd10      	pop	{r4, pc}
 8002472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002476:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800247a:	e7f7      	b.n	800246c <memmove+0x22>

0800247c <_realloc_r>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	4607      	mov	r7, r0
 8002480:	4614      	mov	r4, r2
 8002482:	460e      	mov	r6, r1
 8002484:	b921      	cbnz	r1, 8002490 <_realloc_r+0x14>
 8002486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800248a:	4611      	mov	r1, r2
 800248c:	f7ff bc5e 	b.w	8001d4c <_malloc_r>
 8002490:	b922      	cbnz	r2, 800249c <_realloc_r+0x20>
 8002492:	f7ff fc0f 	bl	8001cb4 <_free_r>
 8002496:	4625      	mov	r5, r4
 8002498:	4628      	mov	r0, r5
 800249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800249c:	f000 f814 	bl	80024c8 <_malloc_usable_size_r>
 80024a0:	42a0      	cmp	r0, r4
 80024a2:	d20f      	bcs.n	80024c4 <_realloc_r+0x48>
 80024a4:	4621      	mov	r1, r4
 80024a6:	4638      	mov	r0, r7
 80024a8:	f7ff fc50 	bl	8001d4c <_malloc_r>
 80024ac:	4605      	mov	r5, r0
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d0f2      	beq.n	8002498 <_realloc_r+0x1c>
 80024b2:	4631      	mov	r1, r6
 80024b4:	4622      	mov	r2, r4
 80024b6:	f7ff ffbd 	bl	8002434 <memcpy>
 80024ba:	4631      	mov	r1, r6
 80024bc:	4638      	mov	r0, r7
 80024be:	f7ff fbf9 	bl	8001cb4 <_free_r>
 80024c2:	e7e9      	b.n	8002498 <_realloc_r+0x1c>
 80024c4:	4635      	mov	r5, r6
 80024c6:	e7e7      	b.n	8002498 <_realloc_r+0x1c>

080024c8 <_malloc_usable_size_r>:
 80024c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024cc:	1f18      	subs	r0, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfbc      	itt	lt
 80024d2:	580b      	ldrlt	r3, [r1, r0]
 80024d4:	18c0      	addlt	r0, r0, r3
 80024d6:	4770      	bx	lr

080024d8 <_init>:
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	bf00      	nop
 80024dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024de:	bc08      	pop	{r3}
 80024e0:	469e      	mov	lr, r3
 80024e2:	4770      	bx	lr

080024e4 <_fini>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr
